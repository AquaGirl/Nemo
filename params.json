{"name":"Nemo","body":"===================\r\nIntroducing Nemo\r\n===================\r\n----------------------------\r\nClarity on the web\r\n----------------------------\r\n\r\nThis is Nemo:\r\n::\r\n    % ul\r\n        %li\r\n            Hello world!\r\n        %li\r\n            Hello Universe!\r\n\r\nLooks like Haml_, eh?\r\nBut this is also Nemo:\r\n::\r\n\r\n\t<ul>\r\n\t\t<li> Hello world! </li>\r\n\t\t%li\r\n\t\t\tHello Universe!\r\n    </ul>\r\n\r\nAnd here's what they BOTH produce:\r\n::\r\n\r\n   <ul >\r\n        <li> Hello world! </li>\r\n       <li >\r\n            Hello Universe!\r\n       </li>\r\n   </ul>\r\n\r\nCan Haml do that? Mixed content documents, and more rope than you know what to do with. That's Nemo.\r\n\r\nA longer example, this is Nemo:\r\n::\r\n\r\n    % fieldset .'upload'\r\n        % legend | strong || Upload Files\r\n        % div .'controls'\r\n            % form #'upload form' action='#'\r\n                % ul .'settings'\r\n\t\t\t\t\tSettings Here\r\n                % ul\r\n                    % li | a .'start'  href=\"javascript:upload()\" || Start Upload\r\n                    % li | a .'clear_queue' href=\"javascript:clear()\" || Clear Queue\r\n                    % li #'uploadify' || You have a problem with your javascript\r\n        % div .'queue_wrapper'\r\n            % div .'uploadifyQueue' #'uploadifyQueue'\r\n\r\nThis is what it produces\r\n::\r\n\r\n\t\t<fieldset class=\"upload\">\r\n\t\t\t<legend><strong>Upload Files</strong></legend>\r\n\t\t\t<div class=\"controls\">\r\n\t\t\t\t<form id=\"upload_form\" action=\"#\">\r\n\t\t\t\t\t<ul class=\"settings\">\r\n\t\t\t\t\t\tSettings Here\r\n\t\t\t\t\t</ul>\r\n\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li><a class='start' href=\"javascript:upload()\">Start Upload</a></li>\r\n\t\t\t\t\t\t<li><a class='clear_queue' href=\"javascript:clear()\">Clear Queue</a></li>\r\n\t\t\t\t\t\t<li id=\"uploadify\">You have a problem with your javascript</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class='queue_wrapper'>\r\n\t\t\t\t<div class='uploadifyQueue' id=\"uploadifyQueue\"></div>\r\n\t\t\t</div>\r\n\t\t</fieldset>\r\n\r\nBackground\r\n==============\r\n\r\nThis project is inspired by PyHaml. I have looked at PyHaml before, and found that:\r\n\t- It is not pythonic in nature\r\n\t- It is overly restrictive\r\n\t- It is not as pretty as it could be\r\n\t- It was not invented here. =)\r\n\r\nAs such, I set out to create an alternative 12 frantic hours of coding later, I have *something* that may possibly be called alpha.\r\n\r\nNemo is intended as an aid, not a shortcut, not a crutch, not a way to avoid learning HTML.\r\nIn order to write proper Nemo, you still have to know HTML and as such it'll get out of your way\r\nif you just want to write HTML.\r\n\r\nHowever, if you want to write it fast, write in Nemo and let it do the heavy lifting for you.\r\n\r\nUsage\r\n===================\r\n\r\nFirst, place this module somewhere in your python path.\r\nPip/Easy_install will be supported later.\r\n\r\nNemo is built over Mako but has to be installed separately.\r\n::\r\n\r\n    pip install mako\r\n\r\n\r\nDjango Integration\r\n----------------------\r\n- Install Djmako to get a Django template loaders for Mako.\r\n  ::\r\n\r\n\t\tpip install djmako\r\n\r\n- Add 'nemo.app' to your Django sites package. It will automatically use the following defaults:\r\n  ::\r\n\r\n\t\tMAKO_TEMPLATE_DIRS=(os.path.join(settings.SITE_ROOT, 'templates'),)\r\n\t\tMAKO_TEMPLATE_OPTS=dict(input_encoding='utf-8',\r\n\t\t\t\t\toutput_encoding='utf-8',\r\n\t\t\t\t\tmodule_directory=os.path.join(settings.SITE_ROOT, 'cache'),\r\n\t\t\t\t\tpreprocessor=nemo\r\n\t\t)\r\n\r\n  But you can override this in your settings.py.\r\n  Only the preprocessor is mandatory to use Nemo and it lives in Nemo.parser\r\n\r\n- Now in your views\r\n  ::\r\n\r\n\t\tfrom nemo import render_to_response, render_to_string\r\n\r\n  Then use those as replacements for the Django driven ones.\r\n  Also, if you're used to using Mako, you can use these functions to render a single Mako def_ (like for an Ajax view)\r\n  ::\r\n\r\n\t\tdef my_view(request):\r\n\t\t\treturn render_to_response('templates\\list.Mako', def_name='item')\r\n\r\n\r\nOther projects\r\n------------------\r\n::\r\n\r\n\tfrom nemo.parser import nemo\r\n\tfrom mako.template import Template\r\n\tt = Template(filename=filename,\r\n\t\tpreprocessor=nemo,\r\n\t\tinput_encoding='utf-8',\r\n\t\toutput_encoding='utf-8',)\r\n\tprint t.render()\r\n\r\n\r\nChangelog\r\n==================\r\n0.9b\r\n\r\nIf you've been following Nemo, version 1.0 will likely come with a few backwards incompatible changes. This is the preview.\r\nThe intent is to allow Nemo to be cleanly used without Django. In the previous release, you could use Nemo, but you'd have to catch import errors.\r\nThe changes are:\r\n\r\n- nemo.app now contains all django related materials\r\n  It exposes: render_to_response, render_to_string, loader (Djmako's loader), MakoExceptionWrapper (exceptions from Djmako that django can template), and defaults (configuration)\r\n- nemo.shortcuts has been moved into nemo.app.shortcuts\r\n- loader, MakoExceptionWrapper, and conf are no longer exposed through the top-level module (nemo)\r\n  However, render_to_response and render_to_string are still exposed if needed for now, but don't rely on this behavior. Start using nemo.app.shortcuts to import them.\r\n\r\nRight now, *no code* needs to be changed on your part, but to future-proof your design please use 'nemo.app' in your Django app settings, instead of 'nemo' as was previously required.\r\nAlso, import render_to_* from nemo.app.shortcuts or nemo.app\r\n\r\n0.8\r\n\r\n- Released January 6th, 2011\r\n\r\nReference\r\n===================\r\n\r\nNemo uses utf-8 internally by default, and expects you will at least use unicode as the input encoding for your templates.\r\n\r\nNemo Tags\r\n-----------------------------------\r\nAny line that starts with a % sign will be interpreted as a Nemo tag\r\n\r\nPlaying well with Mako\r\n-----------------------------------\r\nNemo allows for all Mako code and control structures.\r\nHowever, Mako control structures have to follow the same indentation rules as Nemo code.\r\n\r\nAttributes\r\n-----------------------------------\r\nTo output HTML, Nemo is written like this:\r\n::\r\n\r\n\t% <element type> <attributes 0 ... 1>\r\n\r\nWhere attributes are written as <name> = <value>\r\n\r\nIn the case of the attributes class and id, Nemo provides two short forms:\r\n- #  denotes an id\r\n- .  denotes a class\r\n\r\nThey are used without assignment markers. For example, the following two statements are equivilent\r\n::\r\n\r\n\t% div .'example' #'first'\r\n\t% div class='example' id='first'\r\n\r\n\r\nCaveats:\r\n\t- Nemo will not check for duplicated attributes.\r\n\t- You can only use Mako syntax within strings or HTML nodes.\r\n\t  You can't use it to write your attribute names, like this:\r\n\t  ::\r\n\r\n\t\t\t% li ${name}=${value}\r\n\r\n\t  It will be converted to an empty node\r\n\t  ::\r\n\r\n\t\t\t<li />\r\n\r\nTo compare, this limitation is present in Haml (afaik) as well.\r\n\r\nIndentation Rules\r\n-----------------------------------\r\nAll grouped control tags must have the same indentation. These are:\r\n\t- if / elif / else / endif\r\n\t- for / endfor\r\n\t- while / endwhile\r\n\r\nThe scope of a Nemo block is determined by indentation.\r\nThus all of its contents, including bare HTML must be indented to the right of it.\r\nIt doesn't matter precisely how much a bare HTML block is indented, and consistency is unimportant.\r\n\r\nHTML Escaping\r\n-----------------------------------\r\nNemo intends to make it easy for you to drop down to HTML at any point.\r\nIn the general case, there is no explicit escaping and any line that doesn't start with % is treated as HTML.\r\n\r\nThe exception is Mako end-tags:\r\n\t- %>\r\n\t- %CLOSETEXT\r\n\r\nThese are treated as HTML and go unprocessed even though they begin with a % sign.\r\n\r\nFor example:\r\n\t- You can write this as a valid Nemo block::\r\n\r\n\t\t% ul\r\n\t\t\t<li ${get_my_attributes()} > Custom </li>\r\n\r\n\t- Or write inline javascript. Or write inline CSS.\r\n\t- Or drop in other code that will be processed *later*  by another agent (e.g. Mako code).\r\n\r\nOne fun consequence is that multi-line blocks are allowed *without* any extra escaping.\r\n\r\nRemember doing this in Haml?\r\n::\r\n\r\n\t%whoo\r\n\t  %hoo= h(                       |\r\n\t\t\"I think this might get \" +  |\r\n\t\t\"pretty long so I should \" + |\r\n\t\t\"probably make it \" +        |\r\n\t\t\"multiline so it doesn't \" + |\r\n\t\t\"look awful.\")               |\r\n\t  %p This is short.\r\n\r\nWell here's how you do it in Nemo:\r\n::\r\n\r\n\t%whoo\r\n\t  % hoo\r\n\t\t\tI think this might get\r\n\t\t\tpretty long so I should\r\n\t\t\tprobably make it\r\n\t\t\tmultiline so it doesn't\r\n\t\t\tlook awful.\r\n\t  % p This is short\r\n\r\nChaining Nemo Expressions\r\n-----------------------------------\r\nNemo tags can be chained using '|' as a separator.\r\nTo output HTML at the end, place either '||' before the HTML.\r\nAnything after those markers will be output on a line of its own, at the beginning of the line and subject to further processing by Mako.\r\n\r\nNemo::\r\n\r\n\t\t%li .'toggle top'\r\n\t\t\t% a .'open' href='#' |> Login | Register\r\n\t\t\t% a .'close' href='#' style='display: none;' || Close Panel\r\n\r\nHTML::\r\n\r\n\t\t<li class=\"toggle top\">\r\n\t\t\t<a class=\"open\" href=\"#\">Log In | Register</a>\r\n\t\t\t<a class=\"close\" href=\"#\"  style=\"display: none;\">Close Panel</a>\r\n\t\t</li>\r\n\r\nAs a result, you can use Mako for expression substitution in the same line as Nemo tags.\r\nFor example:\r\n::\r\n\r\n\t% span || 1 + 2 = ${1 + 2}\r\n\r\nWill become:\r\n::\r\n\r\n\t<span>'12'</span>\r\n\r\n\r\nClosing Tags\r\n-----------------------------------\r\nThere are three ways a Nemo tag will be closed prematurely (e.g. before the end of parsing the document): automatic, implied, and explicit.\r\n\r\nAutomatic\r\n~~~~~~~~~~~~~~~~~~~~~\r\nAll tags without content are automatically closed.\r\n\r\nExample::\r\n\r\n\t\t\t% li\r\n\r\nGenerates::\r\n\r\n\t\t\t% <li />\r\n\r\nImplied Closure\r\n~~~~~~~~~~~~~~~~~~~~~\r\nThis is triggered by a HTML block or something that's treated as such (e.g. a Mako tag) appears at a lesser indentation.\r\n\r\nExample::\r\n\r\n\t\t\t% ul\r\n\t\t\t\t% li\r\n\t\t\t\t\tHow deep can I go?\r\n\t\t\t\tNot that deep, sorry.\r\n\t\t\tI fear for you both.\r\n\r\nGenerates::\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li> How deep can I go? </li>\r\n\t\t\t\tNot that deep sorry.\r\n\t\t\t</ul>\r\n\t\t\tI fear for you both.\r\n\r\nExplicit Closure\r\n~~~~~~~~~~~~~~~~~~~~~\r\nTo explicitly close a tag, simply place an empty Nemo tag (%) on a subsequent line at the same indentation\r\nFor example:\r\n::\r\n\r\n\t% li\r\n\t\tWe are happy people!\r\n\t%\r\n\t\tI'm outside, so... not so happy, here.\r\n\r\nGenerates:\r\n::\r\n\r\n\t<li>\r\n\t\tWe are happy people\r\n\t</li>\r\n\t\tI'm outside so not so happy here.\r\n\r\nDebugging\r\n======================================================\r\n- A lot of work has been put into Nemo to make it fail fast upon ambiguity, and yet generate good error messages.\r\n  Anyone who's used an OCaml parser can agree when I say this is fundamental to a good parser[#]\r\n\r\n\r\n- Errors are tracked back to the source line that caused them\r\n  If possible, Nemo will also tell you what it expected at that point.\r\n\r\nFor more basic errors, you might see this an an exception traceback.\r\n::\r\n\r\n           [8|Line: 6][        % endfor]\r\n            ^\t\t^\t\t\t^\r\n            |\t\t|\t\t\t|\r\n            Depth\tLine #\t\tSource content\r\n\r\nThis kind of traceback is usually produced by ambiguous indentation.\r\n\r\nArguments against using Nemo & Responses\r\n======================================================\r\n\"I know HTML\"\r\n\tGood, this makes it easier to write it and gets out of your way if you don't want to use it.\r\n\tThis means you don't have to convert the entirety of your document to Nemo first---just the parts you want to.\r\n\r\n\"I hate indentation\"\r\n\tThis would be a valid argument if Nemo was for Rubyists, or C-philes, or PHPers,\r\n\tor programmers versed in a lingua fraca that doesn't include significant white space.\r\n\r\n\tHowever Nemo is for Pythonistas by a Pythonista.\r\n\tMy editor already handles white-space---including smart indentation during pasting code. Doesn't yours?\r\n\r\n\"I don't like that Disney fish and/or I'm afraid that they'll sue you for using its name\"\r\n\tHaven't you heard of Captain Nemo, aka Prince Dakkar?\r\n\tAlso, when I was searching for a name I thought that 'the Disney fish' Nemo was a type of Mako shark.\r\n\tApparently Chum is the Mako shark in the movie.\r\n\r\n\tHowever, rest assured in a parallel universe Nemo is the Mako shark and I can say\r\n\tthat we are remembering our roots, keeping it real, and are still Jenny on the block, ecetera and so forth. =)\r\n\r\n\"I like Haml\"\r\n\tThis is a can of worms I'll talk about later.\r\n\r\n\"I want Seasides' canvas\"\r\n\tLet's get a beer together.\r\n\r\n\r\nFuture\r\n======================================================\r\n\r\nSyntax\r\n--------------------------------------\r\nCurrently '||' is the only way to break out of a multi-line Nemo statement and get it to nest the subsequent HTML on the rest of the line.\r\nHowever, it is a common case to directly print template variables.\r\n\r\nThe '| >' terminator will indicate to Nemo that the rest characters should be treated as a python one-liner that returns a string.\r\n\r\nFinally, this will be possible:\r\n::\r\n\r\n\t% div .'profile'\r\n\t\t% div .'left column'\r\n\t\t\t% div #'date' \t\t|> print_date\r\n\t\t\t% div #'address'  \t|> current_user.address\r\n\t\t% div .'right column'\r\n\t\t\t% div #'email'  \t|> current_user.email\r\n\t\t\t% div #'bio' \t\t|> current_user.bio\r\n\r\n\r\nStrict Mode and Permissive Mode\r\n---------------------------------------\r\n\r\n\r\nRight now Nemo is running in 'Mixed' mode, in that it will always try to make sense of your document.\r\nHowever if you start a nemo block, it'll expct all of the contents to follow Nemo rules.\r\nThat means it may improperly nest things if you mix tabs & spaces.\r\n\r\n\r\nI have something coded up called \"strict mode\", that essential forces everything to have proper indentation without any laxity.\r\n\r\nPermissive mode on the other hand disables all checks and let's you live in the dangerous land of ambiguity.\r\nIn Permissive mode, the only indentation rule followed is that contents must be to the right of their open scope.\r\nNemo will no longer check to see if all the child nodes are properly indented.\r\n\r\nThe differences are best demonstrated with an example:\r\n::\r\n\r\n    <body>\r\n        <div>\r\n            % span\r\n                Hello World!\r\n        </div>\r\n\r\n        % div\r\n            Under permissive rules I'm allowed.\r\n\r\n            Under Mixed rules I'll parse until this point.\r\n                Why?\r\n                Well I'm nested under the document root.\r\n\r\n            Under strict rules I'll fail because that %span tag is above me.\r\n\r\n\r\n        % ul\r\n            % li\r\n                % span\r\n            <li>\r\n                % span\r\n                    Under permissive rules I'm allowed.\r\n                    Under mixed or strict rules I fail.\r\n                        Why?\r\n                        Because I'm enclosed by a Nemo node, the %ul.\r\n            </li>\r\n    </body>\r\n\r\nOther Implementations?\r\n--------------------------------------\r\nNemo can easily be extend to support other engines.\r\n\t- Django\r\n\t- Jinja\r\n\t- Cheetah\r\n\t- Spitfire\r\n\t- Genshi\r\n\t- etc.\r\n\r\nNemo is a preprocessor over Mako, and isn't tied too deeply into it (except for importing FastBufferReader from Mako).\r\n\r\nAlternatives?\r\n----------------------\r\nHaml:\r\n    - HamlPy\r\n    - PyHaml\r\n    - DjangoHaml\r\n    - Dmsl\r\n    - SHPaml\r\n    - Pamela\r\n    - Mint\r\n    - MakoHaml","tagline":"A HTML template language built over Mako for rapid development, and clearer code","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}